#pragma checksum "C:\Users\kawaz\Desktop\DNP_Assignment_1\Pages\AdultList.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "277d6f1543a7a785ccca0e254f056cc48c1e99e8"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TodoWebApplication.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\kawaz\Desktop\DNP_Assignment_1\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\kawaz\Desktop\DNP_Assignment_1\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\kawaz\Desktop\DNP_Assignment_1\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\kawaz\Desktop\DNP_Assignment_1\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\kawaz\Desktop\DNP_Assignment_1\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\kawaz\Desktop\DNP_Assignment_1\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\kawaz\Desktop\DNP_Assignment_1\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\kawaz\Desktop\DNP_Assignment_1\_Imports.razor"
using TodoWebApplication;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\kawaz\Desktop\DNP_Assignment_1\_Imports.razor"
using TodoWebApplication.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\kawaz\Desktop\DNP_Assignment_1\Pages\AdultList.razor"
using DNP_Assignment_1.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\kawaz\Desktop\DNP_Assignment_1\Pages\AdultList.razor"
using global::Models;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Adults")]
    public partial class AdultList : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 146 "C:\Users\kawaz\Desktop\DNP_Assignment_1\Pages\AdultList.razor"
       

    private IList<Adult> adultsToShow;
    private IList<Adult> allAdults;

    private string Selection = "";
    private string filterOptions;

    private string updatedFirstName = "";
    private string updatedLastname = "";
    private string updatedHairColor;
    private string updatedEyeColor;
    private int updatedAge = 0;
    private float updatedWeight;
    private int updatedHeight;
    private string updatedSex;


    /*Filter by chosen input*/

    private void ExecuteFilter(ChangeEventArgs changeEventArgs)
    {
        filterOptions = changeEventArgs.Value.ToString();

        try
        {
            switch (Selection)
            {
                case "Id":
                    adultsToShow = allAdults.Where(t => (filterOptions != null && t.Id == int.Parse(filterOptions) || string.IsNullOrEmpty(filterOptions))).ToList();
                    break;

                case "First name":
                    adultsToShow = allAdults.Where(t => (filterOptions != null && t.FirstName.Contains(filterOptions) || string.IsNullOrEmpty(filterOptions))).ToList();
                    break;

                case "Last name":
                    adultsToShow = allAdults.Where(t => (filterOptions != null && t.LastName.Contains(filterOptions) || string.IsNullOrEmpty(filterOptions))).ToList();
                    break;

                case "Hair color":
                    adultsToShow = allAdults.Where(t => (filterOptions != null && t.HairColor.Contains(filterOptions) || string.IsNullOrEmpty(filterOptions))).ToList();
                    break;

                case "Eye color":
                    adultsToShow = allAdults.Where(t => (filterOptions != null && t.EyeColor.Contains(filterOptions) || string.IsNullOrEmpty(filterOptions))).ToList();
                    break;

                case "Age":
                    adultsToShow = allAdults.Where(t => (filterOptions != null && t.Age == int.Parse(filterOptions) || string.IsNullOrEmpty(filterOptions))).ToList();
                    break;

                case "Weight":
                    adultsToShow = allAdults.Where(t => (filterOptions != null && t.Weight == float.Parse(filterOptions) || string.IsNullOrEmpty(filterOptions))).ToList();
                    break;

                case "Height":
                    adultsToShow = allAdults.Where(t => (filterOptions != null && t.Height == int.Parse(filterOptions) || string.IsNullOrEmpty(filterOptions))).ToList();
                    break;

                case "Sex":
                    adultsToShow = allAdults.Where(t => (filterOptions != null && t.Sex.Contains(filterOptions) || string.IsNullOrEmpty(filterOptions))).ToList();
                    break;
            }
        }
        catch (FormatException e)
        {
            Console.WriteLine(e);
            adultsToShow = allAdults;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        allAdults = AdultService.getAdults();
        adultsToShow = allAdults;
    }

    /*Remove Adult from list by id*/

    private void RemoveAdult(int id)
    {
        Adult adultToRemove = adultsToShow.First(i => i.Id == id);
        AdultService.removeAdult(adultToRemove);
        adultsToShow.Remove(adultToRemove);

        adultsToShow = allAdults;
    }


    /*Edit adult information*/

    private void EnableEditing(bool flag, int id)
    {
        Adult adultToBeUpdated = adultsToShow.First(i => i.Id == id);
        adultToBeUpdated.IsEditing = flag;
    }

    private void initiateEdit(int id)
    {
        Adult adultToBeUpdated = adultsToShow.First(i => i.Id == id);

        if (String.IsNullOrEmpty(adultToBeUpdated.FirstName) || !adultToBeUpdated.FirstName.Equals(updatedFirstName))
        {
            updatedFirstName = adultToBeUpdated.FirstName;
            EditFirstname(id, updatedFirstName);
        }

        if (String.IsNullOrEmpty(adultToBeUpdated.LastName) || !adultToBeUpdated.LastName.Equals(updatedLastname))
        {
            updatedLastname = adultToBeUpdated.LastName;
            EditLastname(id, updatedLastname);
        }

        if (String.IsNullOrEmpty(adultToBeUpdated.LastName) || String.IsNullOrEmpty(adultToBeUpdated.LastName))
        {
            updatedLastname = adultToBeUpdated.LastName;
            EditHairColor(id, updatedLastname);
        }

        if (String.IsNullOrEmpty(adultToBeUpdated.HairColor) || String.IsNullOrEmpty(adultToBeUpdated.HairColor))
        {
            updatedHairColor = adultToBeUpdated.HairColor;
            EditHairColor(id, updatedHairColor);
        }

        if (String.IsNullOrEmpty(adultToBeUpdated.EyeColor) || String.IsNullOrEmpty(adultToBeUpdated.EyeColor))
        {
            updatedEyeColor = adultToBeUpdated.EyeColor;
            EditHairColor(id, updatedEyeColor);
        }

        if (adultToBeUpdated.Age == 0 || adultToBeUpdated.Age != updatedAge)
        {
            updatedAge = adultToBeUpdated.Age;
            EditAge(id, updatedAge);
        }

        if (adultToBeUpdated.Weight == 0 || adultToBeUpdated.Weight != updatedWeight)
        {
            updatedWeight = adultToBeUpdated.Weight;
            EditWeight(id, updatedWeight);
        }

        if (adultToBeUpdated.Height == 0 || adultToBeUpdated.Height != updatedHeight)
        {
            updatedHeight = adultToBeUpdated.Height;
            EditHeight(id, updatedHeight);
        }

        if (String.IsNullOrEmpty(adultToBeUpdated.Sex) || String.IsNullOrEmpty(adultToBeUpdated.Sex))
        {
            updatedSex = adultToBeUpdated.Sex;
            EditSex(id, updatedSex);
        }

        else
        {
            adultToBeUpdated.IsEditing = false;
        }
    }


    /* Code for specific editing */

    private void EditFirstname(int id, string firstName)
    {
        Adult adultToBeUpdated = adultsToShow.First(i => i.Id == id);
        AdultService.updateFirstName(adultToBeUpdated, updatedFirstName);
        adultToBeUpdated.IsEditing = false;
    }

    private void EditLastname(int id, string lastName)
    {
        Adult adultToBeUpdated = adultsToShow.First(i => i.Id == id);
        AdultService.updateLastName(adultToBeUpdated, updatedLastname);
        adultToBeUpdated.IsEditing = false;
    }

    private void EditHairColor(int id, string hairColor)
    {
        Adult adultToBeUpdated = adultsToShow.First(i => i.Id == id);
        AdultService.updateHairColor(adultToBeUpdated, updatedHairColor);
        adultToBeUpdated.IsEditing = false;
    }

    private void EditEyeColor(int id, string eyeColor)
    {
        Adult adultToBeUpdated = adultsToShow.First(i => i.Id == id);
        AdultService.updateEyeColor(adultToBeUpdated, updatedEyeColor);
        adultToBeUpdated.IsEditing = false;
    }

    private void EditAge(int id, int age)
    {
        Adult adultToBeUpdated = adultsToShow.First(i => i.Id == id);
        AdultService.updateAge(adultToBeUpdated, updatedAge);
        adultToBeUpdated.IsEditing = false;
    }


    private void EditWeight(int id, float weight)
    {
        Adult adultToBeUpdated = adultsToShow.First(i => i.Id == id);
        AdultService.updateWeight(adultToBeUpdated, updatedWeight);
        adultToBeUpdated.IsEditing = false;
    }


    private void EditHeight(int id, int height)
    {
        Adult adultToBeUpdated = adultsToShow.First(i => i.Id == id);
        AdultService.updateHeight(adultToBeUpdated, updatedHeight);
        adultToBeUpdated.IsEditing = false;
    }

    private void EditSex(int id, string sex)
    {
        Adult adultToBeUpdated = adultsToShow.First(i => i.Id == id);
        AdultService.updateSex(adultToBeUpdated, updatedSex);
        adultToBeUpdated.IsEditing = false;
    }




#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAdultService AdultService { get; set; }
    }
}
#pragma warning restore 1591
